from aiogram import Router, types, F
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import get_personal_game_kb
from middlewares import DBSessionMiddleware
from services.user_manager import UserManager

router = Router(name='test')

router.message.middleware(DBSessionMiddleware())
router.callback_query.middleware(DBSessionMiddleware())


@router.message(F.text == "db")
async def db_handler(message: types.Message, session: AsyncSession):
    # await UserManager().add_user(message.chat.id)
    # await UserManager().update_user_daily_streak(message.chat.id, True)
    # result = await UserManager().save_game_result(message.chat.id, True)
    # result = await UserManager(session).get_all_users()
    # x = []
    # for u in result:
    #     try:
    #
    #     except:
    #         pass
    await message.bot.send_message(
        chat_id=358830184,
        text="–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ",
        reply_markup=get_personal_game_kb()
    )


@router.message(F.text == "announce")
async def announce_handler(message: types.Message, session: AsyncSession):
    # users = await UserManager(session).get_all_users()
    users = await UserManager(session).get_user(358830184)
    users = [users]
    TEXT = ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ v0.2.1üî•\n"
            "\n"
            "<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            "- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏—â–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ‚¨áÔ∏è)\n"
            "- –¢—É—Ä–Ω–∏—Ä—ã 1 –Ω–∞ 1 –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –≤ –¥—É—ç–ª–∏\n"
            "- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏\n"
            "- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞")
    for u in users:
        await message.bot.send_message(
            chat_id=u.chat_id,
            text=TEXT,
            reply_markup=get_personal_game_kb(),
            parse_mode=ParseMode.HTML,
        )
